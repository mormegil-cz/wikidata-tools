{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/main.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","$","document","getElementById","bind","GraphNode","constructor","id","label","shape","this","ItemSet","canQuery","QueryItemSet","query","super","computeQuery","nodes","vis","DataSet","edges","window","onload","$selectionLabel","$selectionToolbox","$dlgQuery","$editQuerySparql","addEventListener","selectedNode","getSelectedNode","editedCaption","prompt","innerText","update","value","showModal","nodeId","add","network","focus","fit","open","encodeURIComponent","replace","data","Network","changeZoom","frac","moveTo","scale","getScale","position","getViewPosition","selectedNodeIds","getSelectedNodes","get","updateSelection","style","visibility","on"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const $: (elementId: string) => HTMLElement | null = document.getElementById.bind(document);\r\n\r\ninterface ClickedNode {\r\n    nodeId: number;\r\n    labelId?: number;\r\n}\r\n\r\ninterface ClickedEdge {\r\n    edgeId: number;\r\n    labelId?: number;\r\n}\r\n\r\ninterface ClickProperties extends vis.Properties {\r\n    items: (ClickedNode | ClickedEdge)[];\r\n}\r\n\r\nfunction isClickedEdge(p: ClickedNode | ClickedEdge): p is ClickedEdge {\r\n    return \"edgeId\" in p;\r\n}\r\n\r\nfunction isClickedNode(p: ClickedNode | ClickedEdge): p is ClickedEdge {\r\n    return \"nodeId\" in p;\r\n}\r\n\r\ninterface QueryableNode {\r\n    computeQuery(): string;\r\n}\r\n\r\nabstract class GraphNode implements vis.Node {\r\n    protected constructor(\r\n        public readonly id: number,\r\n        public label: string,\r\n        public shape: string,\r\n    ) {\r\n    }\r\n\r\n    public abstract canQuery(): this is QueryableNode;\r\n}\r\n\r\nclass DummyNode extends GraphNode {\r\n    public constructor(\r\n        id: number,\r\n        label: string,\r\n    ) {\r\n        super(id, label, 'big ellipse');\r\n    }\r\n\r\n    public override canQuery(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nabstract class ItemSet extends GraphNode implements QueryableNode {\r\n    public abstract computeQuery(): string;\r\n\r\n    public override canQuery(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass QueryItemSet extends ItemSet {\r\n    constructor(\r\n        id: number,\r\n        label: string,\r\n        public readonly query: string,\r\n    ) {\r\n        super(id, label, 'big box');\r\n    }\r\n\r\n    public override computeQuery(): string {\r\n        return this.query;\r\n    }\r\n}\r\n\r\nconst nodes = new vis.DataSet<GraphNode>([]);\r\nconst edges = new vis.DataSet<vis.Edge>([]);\r\n\r\nfunction init() {\r\n    const $selectionLabel = $('selectionLabel');\r\n    const $selectionToolbox = $('selectionToolbox');\r\n    const $btnLoadProps = $('btnLoadProps') as HTMLButtonElement;\r\n    const $dlgQuery = $('dlgQuery') as HTMLDialogElement;\r\n    const $editQuerySparql = $('editQuerySparql') as HTMLTextAreaElement;\r\n\r\n    $('selectionLabel').addEventListener('click', editNodeLabel);\r\n    $('btnAddQuery').addEventListener('click', showInitialQueryDialog);\r\n    $dlgQuery.addEventListener('close', addQueryNode);\r\n    $('btnWqs').addEventListener('click', openNodeInWqs);\r\n\r\n    const options = {};\r\n    const data = {\r\n        nodes: nodes,\r\n        edges: edges\r\n    };\r\n    const network = new vis.Network($('display'), data, options);\r\n    network.on('selectNode', updateSelection);\r\n    network.on('deselectNode', updateSelection);\r\n\r\n    $('btnZoomFit').addEventListener('click', () => network.fit());\r\n    $('btnZoomPlus').addEventListener('click', () => changeZoom(1.4142));\r\n    $('btnZoomMinus').addEventListener('click', () => changeZoom(0.7071));\r\n\r\n    /*\r\n    setInterval(() => {\r\n        var nodeId = nodes.length + 1;\r\n        nodes.add(new DummyNode(nodeId, \"Node \" + nodeId));\r\n        edges.add({ id: edges.length + 1, from: nodeId, to: Math.floor(1 + Math.random() * (nodeId - 1)) });\r\n        edges.add({ id: edges.length + 1, from: Math.floor(1 + Math.random() * nodeId), to: Math.floor(1 + Math.random() * nodeId) });\r\n    }, 2000);\r\n    */\r\n\r\n    function showInitialQueryDialog() {\r\n        $editQuerySparql.value = 'VALUES ?item { wdt:Q42 }';\r\n        // old typings, not yet released: https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1258\r\n        ($dlgQuery as any).showModal();\r\n    }\r\n\r\n    function addQueryNode() {\r\n        const nodeId = nodes.length;\r\n        nodes.add(new QueryItemSet(nodeId, 'Query ' + (nodeId + 1), $editQuerySparql.value));\r\n        network.focus(nodeId);\r\n        network.fit();\r\n    }\r\n\r\n    function changeZoom(frac: number) {\r\n        // bad typing, see https://visjs.github.io/vis-network/docs/network/#methodViewport\r\n        network.moveTo(\r\n            <any>{\r\n                scale: network.getScale() * frac,\r\n                position: network.getViewPosition(),\r\n            }\r\n        );\r\n    }\r\n\r\n    function getSelectedNode(): (GraphNode | null) {\r\n        const selectedNodeIds = network.getSelectedNodes();\r\n        return selectedNodeIds.length ? nodes.get(selectedNodeIds[0]) : null;\r\n    }\r\n\r\n    function editNodeLabel() {\r\n        const selectedNode = getSelectedNode();\r\n        if (!selectedNode) return;\r\n        const editedCaption = prompt('Node caption:', selectedNode.label);\r\n        if (editedCaption) {\r\n            selectedNode.label = editedCaption;\r\n            $selectionLabel.innerText = editedCaption;\r\n            nodes.update(selectedNode);\r\n        }\r\n    }\r\n\r\n    function updateSelection() {\r\n        const selectedNode = getSelectedNode();\r\n        if (selectedNode) {\r\n            $selectionLabel.innerText = selectedNode.label;\r\n            $selectionToolbox.style.visibility = 'visible';\r\n        } else {\r\n            $selectionLabel.innerText = '';\r\n            $selectionToolbox.style.visibility = 'hidden';\r\n        }\r\n    }\r\n\r\n    function openNodeInWqs() {\r\n        const selectedNode = getSelectedNode();\r\n        if (!selectedNode || !selectedNode.canQuery()) return;\r\n\r\n        window.open('https://query.wikidata.org/#' + encodeURIComponent('SELECT ?item WHERE {\\n\\t' + selectedNode.computeQuery().replace(/\\\\n/g, '\\n\\t') + '\\n}'))\r\n    }\r\n}\r\n\r\nwindow.onload = init;\r\n"]}